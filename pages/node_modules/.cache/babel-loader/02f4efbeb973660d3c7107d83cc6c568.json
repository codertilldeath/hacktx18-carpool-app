{"ast":null,"code":"import _defineProperty from \"/Users/kathleendoviken/Desktop/cs/hacktx18-carpool-app/pages/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/kathleendoviken/Desktop/cs/hacktx18-carpool-app/pages/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kathleendoviken/Desktop/cs/hacktx18-carpool-app/pages/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { states } from './States.js';\n/*\n * This class simply helps us coordinate the transitions\n * between states. We've hardcoded the state \"tree\" in \n * the constructor. This class makes sure that any\n * transition between states requested by the app\n * are valid.\n */\n\nexport var StateMachine =\n/*#__PURE__*/\nfunction () {\n  function StateMachine() {\n    var _this$transitions;\n\n    _classCallCheck(this, StateMachine);\n\n    this.transitions = (_this$transitions = {}, _defineProperty(_this$transitions, states.WELCOME, [states.PERSON_CHOOSE]), _defineProperty(_this$transitions, states.PERSON_CHOOSE, [states.CAR_DETAIL, states.RIDER_START]), _defineProperty(_this$transitions, states.CAR_DETAIL, [states.DRIVER_START]), _defineProperty(_this$transitions, states.DRIVER_START, [states.DRIVER_FINISH]), _defineProperty(_this$transitions, states.DRIVER_FINISH, [states.CONFIRM]), _defineProperty(_this$transitions, states.RIDER_START, [states.RIDER_FINISH]), _defineProperty(_this$transitions, states.RIDER_FINISH, [states.CONFIRM]), _defineProperty(_this$transitions, states.CONFIRM, [states.FINISH]), _this$transitions);\n  }\n\n  _createClass(StateMachine, [{\n    key: \"_reverseObject\",\n    value: function _reverseObject(obj) {\n      var reversed = {};\n\n      var _loop = function _loop(key) {\n        if (obj.hasOwnProperty(key)) {\n          obj[key].forEach(function (i) {\n            if (reversed[i] === undefined) {\n              reversed[i] = [key];\n            } else {\n              reversed[i].push(key);\n            }\n          });\n        }\n      };\n\n      for (var key in obj) {\n        _loop(key);\n      }\n\n      return reversed;\n    }\n  }, {\n    key: \"_checkState\",\n    value: function _checkState(available, desired) {\n      if (available.includes(desired)) {\n        return desired;\n      } else {\n        throw new Error(\"Desired state: \".concat(desired, \" is not available\"));\n      }\n    }\n  }, {\n    key: \"transitionTo\",\n    value: function transitionTo(current, desired) {\n      var available = this.transitions[current].concat();\n      console.log(available);\n      return this._checkState(available, desired);\n    }\n  }, {\n    key: \"transitionFrom\",\n    value: function transitionFrom(current, desired) {\n      var reversed = this._reverseObject(this.transitions);\n\n      console.log(reversed[current]);\n      var available = reversed[current].concat();\n      return this._checkState(available, desired);\n    }\n  }]);\n\n  return StateMachine;\n}();","map":{"version":3,"sources":["/Users/kathleendoviken/Desktop/cs/hacktx18-carpool-app/pages/src/components/StateMachine.js"],"names":["states","StateMachine","transitions","WELCOME","PERSON_CHOOSE","CAR_DETAIL","RIDER_START","DRIVER_START","DRIVER_FINISH","CONFIRM","RIDER_FINISH","FINISH","obj","reversed","key","hasOwnProperty","forEach","i","undefined","push","available","desired","includes","Error","current","concat","console","log","_checkState","_reverseObject"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,aAAvB;AAEA;;;;;;;;AAOA,WAAaC,YAAb;AAAA;AAAA;AACE,0BAAc;AAAA;;AAAA;;AACZ,SAAKC,WAAL,+DACGF,MAAM,CAACG,OADV,EACqB,CAACH,MAAM,CAACI,aAAR,CADrB,sCAEGJ,MAAM,CAACI,aAFV,EAE2B,CAACJ,MAAM,CAACK,UAAR,EAAoBL,MAAM,CAACM,WAA3B,CAF3B,sCAGGN,MAAM,CAACK,UAHV,EAGwB,CAACL,MAAM,CAACO,YAAR,CAHxB,sCAIGP,MAAM,CAACO,YAJV,EAI0B,CAACP,MAAM,CAACQ,aAAR,CAJ1B,sCAKGR,MAAM,CAACQ,aALV,EAK2B,CAACR,MAAM,CAACS,OAAR,CAL3B,sCAMGT,MAAM,CAACM,WANV,EAMyB,CAACN,MAAM,CAACU,YAAR,CANzB,sCAOGV,MAAM,CAACU,YAPV,EAO0B,CAACV,MAAM,CAACS,OAAR,CAP1B,sCAQGT,MAAM,CAACS,OARV,EAQqB,CAACT,MAAM,CAACW,MAAR,CARrB;AAUD;;AAZH;AAAA;AAAA,mCAciBC,GAdjB,EAcsB;AAClB,UAAIC,QAAQ,GAAG,EAAf;;AADkB,iCAERC,GAFQ;AAGhB,YAAGF,GAAG,CAACG,cAAJ,CAAmBD,GAAnB,CAAH,EAA4B;AAC1BF,UAAAA,GAAG,CAACE,GAAD,CAAH,CAASE,OAAT,CAAiB,UAACC,CAAD,EAAO;AACtB,gBAAGJ,QAAQ,CAACI,CAAD,CAAR,KAAgBC,SAAnB,EAA8B;AAC5BL,cAAAA,QAAQ,CAACI,CAAD,CAAR,GAAc,CAACH,GAAD,CAAd;AACD,aAFD,MAEO;AACLD,cAAAA,QAAQ,CAACI,CAAD,CAAR,CAAYE,IAAZ,CAAiBL,GAAjB;AACD;AACF,WAND;AAOD;AAXe;;AAElB,WAAI,IAAMA,GAAV,IAAiBF,GAAjB,EAAsB;AAAA,cAAZE,GAAY;AAUrB;;AACD,aAAOD,QAAP;AACD;AA5BH;AAAA;AAAA,gCA8BcO,SA9Bd,EA8ByBC,OA9BzB,EA8BkC;AAC9B,UAAID,SAAS,CAACE,QAAV,CAAmBD,OAAnB,CAAJ,EAAiC;AAC/B,eAAOA,OAAP;AACD,OAFD,MAEO;AACL,cAAM,IAAIE,KAAJ,0BAA4BF,OAA5B,uBAAN;AACD;AACF;AApCH;AAAA;AAAA,iCAsCeG,OAtCf,EAsCwBH,OAtCxB,EAsCiC;AAC7B,UAAID,SAAS,GAAG,KAAKlB,WAAL,CAAiBsB,OAAjB,EAA0BC,MAA1B,EAAhB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYP,SAAZ;AACA,aAAO,KAAKQ,WAAL,CAAiBR,SAAjB,EAA4BC,OAA5B,CAAP;AACD;AA1CH;AAAA;AAAA,mCA4CiBG,OA5CjB,EA4C0BH,OA5C1B,EA4CmC;AAC/B,UAAIR,QAAQ,GAAG,KAAKgB,cAAL,CAAoB,KAAK3B,WAAzB,CAAf;;AACAwB,MAAAA,OAAO,CAACC,GAAR,CAAYd,QAAQ,CAACW,OAAD,CAApB;AACA,UAAIJ,SAAS,GAAGP,QAAQ,CAACW,OAAD,CAAR,CAAkBC,MAAlB,EAAhB;AACA,aAAO,KAAKG,WAAL,CAAiBR,SAAjB,EAA4BC,OAA5B,CAAP;AACD;AAjDH;;AAAA;AAAA","sourcesContent":["import { states } from './States.js';\n\n/*\n * This class simply helps us coordinate the transitions\n * between states. We've hardcoded the state \"tree\" in \n * the constructor. This class makes sure that any\n * transition between states requested by the app\n * are valid.\n */\nexport class StateMachine {\n  constructor() {\n    this.transitions = {\n      [states.WELCOME] : [states.PERSON_CHOOSE],\n      [states.PERSON_CHOOSE] : [states.CAR_DETAIL, states.RIDER_START],\n      [states.CAR_DETAIL] : [states.DRIVER_START],\n      [states.DRIVER_START] : [states.DRIVER_FINISH],\n      [states.DRIVER_FINISH] : [states.CONFIRM],\n      [states.RIDER_START] : [states.RIDER_FINISH],\n      [states.RIDER_FINISH] : [states.CONFIRM],\n      [states.CONFIRM] : [states.FINISH]\n    };\n  }\n\n  _reverseObject(obj) {\n    let reversed = {};\n    for(const key in obj) {\n      if(obj.hasOwnProperty(key)) {\n        obj[key].forEach((i) => {\n          if(reversed[i] === undefined) {\n            reversed[i] = [key];\n          } else {\n            reversed[i].push(key);\n          }\n        });\n      }\n    }\n    return reversed;\n  }\n\n  _checkState(available, desired) {\n    if (available.includes(desired)) {\n      return desired;\n    } else {\n      throw new Error(`Desired state: ${desired} is not available`);\n    }\n  }\n\n  transitionTo(current, desired) {\n    let available = this.transitions[current].concat();\n    console.log(available)\n    return this._checkState(available, desired);\n  }\n\n  transitionFrom(current, desired) {\n    let reversed = this._reverseObject(this.transitions);\n    console.log(reversed[current]);\n    let available = reversed[current].concat();\n    return this._checkState(available, desired);\n  }\n}"]},"metadata":{},"sourceType":"module"}