{"ast":null,"code":"import _defineProperty from \"/Users/kathleendoviken/Desktop/cs/hacktx18-carpool-app/pages/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/kathleendoviken/Desktop/cs/hacktx18-carpool-app/pages/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/kathleendoviken/Desktop/cs/hacktx18-carpool-app/pages/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { states } from './States.js';\n/*\n * This class simply helps us coordinate the transitions\n * between states. We've hardcoded the state \"tree\" in \n * the constructor. This class makes sure that any\n * transition between states requested by the app\n * are valid.\n */\n\nexport var StateMachine =\n/*#__PURE__*/\nfunction () {\n  function StateMachine() {\n    var _this$transitions;\n\n    _classCallCheck(this, StateMachine);\n\n    this.transitions = (_this$transitions = {}, _defineProperty(_this$transitions, states.WELCOME, [states.PERSON_CHOOSE]), _defineProperty(_this$transitions, states.PERSON_CHOOSE, [states.CAR_DETAIL, states.RIDER_START]), _defineProperty(_this$transitions, states.CAR_DETAIL, [states.DRIVER_START]), _defineProperty(_this$transitions, states.DRIVER_START, [states.DRIVER_FINISH]), _defineProperty(_this$transitions, states.DRIVER_FINISH, [states.CONFIRM]), _defineProperty(_this$transitions, states.RIDER_START, [states.RIDER_FINISH]), _defineProperty(_this$transitions, states.RIDER_FINISH, [states.CONFIRM]), _defineProperty(_this$transitions, states.CONFIRM, [states.FINISH]), _this$transitions);\n  }\n\n  _createClass(StateMachine, [{\n    key: \"_reverseObject\",\n    value: function _reverseObject(obj) {\n      var reversed = {};\n\n      var _loop = function _loop(key) {\n        if (obj.hasOwnProperty(key)) {\n          obj[key].forEach(function (i) {\n            if (reversed[i] === undefined) {\n              reversed[i] = [key];\n            } else {\n              reversed[i].push(key);\n            }\n          });\n        }\n      };\n\n      for (var key in obj) {\n        _loop(key);\n      }\n\n      return reversed;\n    }\n  }, {\n    key: \"_checkState\",\n    value: function _checkState(available, desired) {\n      if (available.includes(desired)) {\n        return desired;\n      } else {\n        throw new Error(\"Desired state: \".concat(desired, \" is not available\"));\n      }\n    }\n  }, {\n    key: \"transitionTo\",\n    value: function transitionTo(current, desired) {\n      var available = this.transitions[current].concat();\n      return this._checkState(available, desired);\n    }\n  }, {\n    key: \"transitionFrom\",\n    value: function transitionFrom(current, desired) {\n      var reversed = this._reverseObject(this.transitions);\n\n      var available = reversed[current].concat();\n      console.log(\"des:\", desired);\n      console.log(\"ava\", available);\n      return this._checkState(available, desired);\n    }\n  }]);\n\n  return StateMachine;\n}();","map":{"version":3,"sources":["/Users/kathleendoviken/Desktop/cs/hacktx18-carpool-app/pages/src/components/StateMachine.js"],"names":["states","StateMachine","transitions","WELCOME","PERSON_CHOOSE","CAR_DETAIL","RIDER_START","DRIVER_START","DRIVER_FINISH","CONFIRM","RIDER_FINISH","FINISH","obj","reversed","key","hasOwnProperty","forEach","i","undefined","push","available","desired","includes","Error","current","concat","_checkState","_reverseObject","console","log"],"mappings":";;;AAAA,SAASA,MAAT,QAAuB,aAAvB;AAEA;;;;;;;;AAOA,WAAaC,YAAb;AAAA;AAAA;AACI,0BAAc;AAAA;;AAAA;;AACV,SAAKC,WAAL,+DACKF,MAAM,CAACG,OADZ,EACsB,CAACH,MAAM,CAACI,aAAR,CADtB,sCAEKJ,MAAM,CAACI,aAFZ,EAE4B,CAACJ,MAAM,CAACK,UAAR,EAAoBL,MAAM,CAACM,WAA3B,CAF5B,sCAGKN,MAAM,CAACK,UAHZ,EAGyB,CAACL,MAAM,CAACO,YAAR,CAHzB,sCAIKP,MAAM,CAACO,YAJZ,EAI2B,CAACP,MAAM,CAACQ,aAAR,CAJ3B,sCAKKR,MAAM,CAACQ,aALZ,EAK4B,CAACR,MAAM,CAACS,OAAR,CAL5B,sCAMKT,MAAM,CAACM,WANZ,EAM0B,CAACN,MAAM,CAACU,YAAR,CAN1B,sCAOKV,MAAM,CAACU,YAPZ,EAO2B,CAACV,MAAM,CAACS,OAAR,CAP3B,sCAQKT,MAAM,CAACS,OARZ,EAQsB,CAACT,MAAM,CAACW,MAAR,CARtB;AAUH;;AAZL;AAAA;AAAA,mCAcmBC,GAdnB,EAcwB;AAChB,UAAIC,QAAQ,GAAG,EAAf;;AADgB,iCAELC,GAFK;AAGZ,YAAIF,GAAG,CAACG,cAAJ,CAAmBD,GAAnB,CAAJ,EAA6B;AACzBF,UAAAA,GAAG,CAACE,GAAD,CAAH,CAASE,OAAT,CAAiB,UAACC,CAAD,EAAO;AACpB,gBAAIJ,QAAQ,CAACI,CAAD,CAAR,KAAgBC,SAApB,EAA+B;AAC3BL,cAAAA,QAAQ,CAACI,CAAD,CAAR,GAAc,CAACH,GAAD,CAAd;AACH,aAFD,MAEO;AACHD,cAAAA,QAAQ,CAACI,CAAD,CAAR,CAAYE,IAAZ,CAAiBL,GAAjB;AACH;AACJ,WAND;AAOH;AAXW;;AAEhB,WAAK,IAAMA,GAAX,IAAkBF,GAAlB,EAAuB;AAAA,cAAZE,GAAY;AAUtB;;AACD,aAAOD,QAAP;AACH;AA5BL;AAAA;AAAA,gCA8BgBO,SA9BhB,EA8B2BC,OA9B3B,EA8BoC;AAC5B,UAAID,SAAS,CAACE,QAAV,CAAmBD,OAAnB,CAAJ,EAAiC;AAC7B,eAAOA,OAAP;AACH,OAFD,MAEO;AACH,cAAM,IAAIE,KAAJ,0BAA4BF,OAA5B,uBAAN;AACH;AACJ;AApCL;AAAA;AAAA,iCAsCiBG,OAtCjB,EAsC0BH,OAtC1B,EAsCmC;AAC3B,UAAID,SAAS,GAAG,KAAKlB,WAAL,CAAiBsB,OAAjB,EAA0BC,MAA1B,EAAhB;AAEA,aAAO,KAAKC,WAAL,CAAiBN,SAAjB,EAA4BC,OAA5B,CAAP;AACH;AA1CL;AAAA;AAAA,mCA4CmBG,OA5CnB,EA4C4BH,OA5C5B,EA4CqC;AAC7B,UAAIR,QAAQ,GAAG,KAAKc,cAAL,CAAoB,KAAKzB,WAAzB,CAAf;;AACA,UAAIkB,SAAS,GAAGP,QAAQ,CAACW,OAAD,CAAR,CAAkBC,MAAlB,EAAhB;AACAG,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBR,OAApB;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAmBT,SAAnB;AACA,aAAO,KAAKM,WAAL,CAAiBN,SAAjB,EAA4BC,OAA5B,CAAP;AACH;AAlDL;;AAAA;AAAA","sourcesContent":["import { states } from './States.js';\n\n/*\n * This class simply helps us coordinate the transitions\n * between states. We've hardcoded the state \"tree\" in \n * the constructor. This class makes sure that any\n * transition between states requested by the app\n * are valid.\n */\nexport class StateMachine {\n    constructor() {\n        this.transitions = {\n            [states.WELCOME]: [states.PERSON_CHOOSE],\n            [states.PERSON_CHOOSE]: [states.CAR_DETAIL, states.RIDER_START],\n            [states.CAR_DETAIL]: [states.DRIVER_START],\n            [states.DRIVER_START]: [states.DRIVER_FINISH],\n            [states.DRIVER_FINISH]: [states.CONFIRM],\n            [states.RIDER_START]: [states.RIDER_FINISH],\n            [states.RIDER_FINISH]: [states.CONFIRM],\n            [states.CONFIRM]: [states.FINISH]\n        };\n    }\n\n    _reverseObject(obj) {\n        let reversed = {};\n        for (const key in obj) {\n            if (obj.hasOwnProperty(key)) {\n                obj[key].forEach((i) => {\n                    if (reversed[i] === undefined) {\n                        reversed[i] = [key];\n                    } else {\n                        reversed[i].push(key);\n                    }\n                });\n            }\n        }\n        return reversed;\n    }\n\n    _checkState(available, desired) {\n        if (available.includes(desired)) {\n            return desired;\n        } else {\n            throw new Error(`Desired state: ${desired} is not available`);\n        }\n    }\n\n    transitionTo(current, desired) {\n        let available = this.transitions[current].concat();\n\n        return this._checkState(available, desired);\n    }\n\n    transitionFrom(current, desired) {\n        let reversed = this._reverseObject(this.transitions);\n        let available = reversed[current].concat();\n        console.log(\"des:\", desired);\n        console.log(\"ava\", available);\n        return this._checkState(available, desired);\n    }\n}"]},"metadata":{},"sourceType":"module"}